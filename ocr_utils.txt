# File: ocr_utils.py
import cv2
import pytesseract
import re
import os
import tempfile
from pdf2image import convert_from_bytes

def extract_text_from_file(file_path, file_type="image"):
    """
    Extract text from an image or PDF file.
    """
    if file_type == "image":
        image = cv2.imread(file_path)
        if image is None:
            raise ValueError("Unable to read image")
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        text = pytesseract.image_to_string(gray, lang="eng")
        return text
    elif file_type == "pdf":
        with open(file_path, "rb") as f:
            pages = convert_from_bytes(f.read(), dpi=300)
        if pages:
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
            pages[0].save(temp_file.name, "JPEG")
            image = cv2.imread(temp_file.name)
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            text = pytesseract.image_to_string(gray, lang="eng")
            os.unlink(temp_file.name)
            return text
        else:
            return ""
    else:
        raise ValueError("Unsupported file type")

def extract_parameters(text):
    """
    Extracts blood report parameters using regular expressions.
    The expected keys are: sex, hb, pcv, rbc, mcv, mch, mchc, rdw, wbc,
    neut, lymph, plt, hba, hba2, hbf.
    
    The regex patterns assume the text contains lines like:
      "Hb: 10.8" or "MCV - 68.7", etc.
    """
    parameters = {}
    patterns = {
        "sex": r"(Sex|Gender)\s*[:\-]?\s*(male|female)",
        "hb": r"(Hemoglobin|Hb)\s*[:\-]?\s*([\d\.]+)",
        "pcv": r"(PCV|Packed\s*Cell\s*Volume)\s*[:\-]?\s*([\d\.]+)",
        "rbc": r"(RBC)(?:\s*Count)?\s*[:\-]?\s*([\d\.]+)",
        "mcv": r"(MCV)\s*[:\-]?\s*([\d\.]+)",
        "mch": r"(MCH)\s*[:\-]?\s*([\d\.]+)",
        "mchc": r"(MCHC)\s*[:\-]?\s*([\d\.]+)",
        "rdw": r"(RDW)\s*[:\-]?\s*([\d\.]+)",
        "wbc": r"(WBC|White\s*Blood\s*Cell\s*Count)\s*[:\-]?\s*([\d\.]+)",
        "neut": r"(Neutrophils?|NEUT)\s*[:\-]?\s*([\d\.]+)",
        "lymph": r"(Lymphocytes?|LYMPH)\s*[:\-]?\s*([\d\.]+)",
        "plt": r"(Platelets?|PLT)\s*[:\-]?\s*([\d\.]+)",
        "hba": r"(HbA)\s*[:\-]?\s*([\d\.]+)",
        "hba2": r"(HbA2)\s*[:\-]?\s*([\d\.]+)",
        "hbf": r"(HbF)\s*[:\-]?\s*([\d\.]+)",
    }
    
    # Loop through each pattern and search the text.
    for field, pattern in patterns.items():
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            if field == "sex":
                parameters[field] = match.group(2).lower()
            else:
                # Some patterns have the number in group 3 (e.g. for "rbc") while others in group 2.
                try:
                    # If group 3 exists, use it; else use group 2.
                    num_str = match.group(3) if len(match.groups()) >= 3 else match.group(2)
                    parameters[field] = float(num_str)
                except Exception as e:
                    parameters[field] = None
        else:
            parameters[field] = None

    # Also store the raw text for debugging if needed.
    parameters["raw_text"] = text
    return parameters
